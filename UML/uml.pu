@startuml uml
hide empty fields
skinparam linetype ortho

package model {
    class Game {
        - gameId: int
        - gameState: State
        - players: List<Player>
        - playerHand: List<Hand>
        - playerStructure: List<Structure>
        - deck: Deck
        - board: Board
        - numPlayers: int
        - numParticipants: int
        '- ?StadioGioco
        - currentPlayer: Player
        - nextPlayer: Player
        - observerList: List<View>
        'General'
        
        + game(gameId: int): void
        + notifyAll(): void
        + addObserver(view: View): void
        + removeObserver(view: View): void
        + addPlayer(player: Player): void
        + getCurrentPlater(): Player
        + getNextPlayer(): Player
        + getState(): State
        + getDeck(): Deck
        + getBoard(): Board
        + getNumPlayers(): int
        + getNumParticipants(): int
        + getGameId(): int
        + getPlayers(): List<Player>
        + getHandByPlayer(player: Player): Hand
        + getStructureByPlayer(player: Player): Structure
        + setState(state: State): void
        + setNumPlayers(num: int): void
        + setNumParticipants(num: int): void
        + setDeck(deck: Deck): void
        + setBoard(board: Board): void
        + setPlayerHand(player: Player, hand: Hand): void
        + setPlayerStructure(player: Player, structure: Structure): void
        + setCurrentPlayer(player: Player): void 
        + setNextPlayer(player: Player): void 
    }
    
    class Player {
        - nickname: String
        - colorPlayer: Color
        
        + Player(nickname: String, colorPlayer: Color): void
        + getNickname(): String
        + getColorPlayer(): Color
        }
    
    class AbstractPlayerFactory{
        + createRmiPlayer(): Rmi
        + createSocketPlayer(): Gui

    }
    class CliPlayerFactory extends AbstractPlayerFactory{
        - cliRmi: CliRmiPlayer
        - cliSocket: CliSocketPlayer
        + createRmiPlayer(): Rmi
        + createSocketPlayer(): Socket
    }

    class GuiPlayerFactory extends AbstractPlayerFactory{
        - guiRmi: GuiRmiPlayer
        - guiSocket: GuiSocketPlayer
        + createRmiPlayer(): Rmi
        + createSocketPlayer(): Socket
    }
    class CliRmiPlayer extends Player{
        'override
        + assemble(): void 
        ' contiene la logica per costruire un cliRmiPlayer
    }

    class CliSocketPlayer extends Player{
        'override
        + assemble(): void 
        ' contiene la logica per costruire un cliSocketPlayer
    }

    class GuiRmiPlayer extends Player {
        'override
        + assemble(): void 
        ' contiene la logica per costruire un guiRmiPlayer
    }

    class GuiSocketPlayer extends Player {
        'override
        + assemble(): void 
        ' contiene la logica per costruire un guiSocketPlayer
    }

    interface Rmi{
        + assemble(): void
        'contiene la logica per costruire un generico RmiPlayer
    }

    interface Socket{
        + assemble(): void
        'contiene la logica per costruire un generico SocketPlayer
    }

    abstract class State {
        - game: Game

        + State(): void
        + initialize(): void
        + joinGame(): void
        + placedCard(): void
        + drawnCard(): void
        + matchEnded(): void
    }

    class InitState {
        + InitState(): void
        + initialized(): void
        - createDecks(): void
        - createFirstPlayer(): void
        - dealHands(): void
        - dealSecretObjective(): void
        - dealCommonObjective(): void
    }

    note right of InitState::createDecks
    createDecks parses the json file and forall 
    card in it calls the Deck's method "addCard". 
    When finished it shuffles the deck calling on 
    it the method "shuffle".
    end note

    note right of InitState::createFirstPlayer
    createFirstPlayer creates a new player calling the constructor
    method in Player. The controller will manage to acquire the 
    informations regarding the total number of players admitted inside
    the lobby and will pass them to the createFirstPlayer method so that 
    it sets the state informations in Game.
    end note

    note right of InitState::dealHands
    dealHands draws 3 cards for each player from 
    the deck and adds them to each player hand
    end note

    note right of InitState::dealSecretObjective
    dealSecretObjective parses the json file searching
    for the "secret objective" cards and selects two 
    of them for each player. Those cards will be added 
    to the "chooseBetweenObj" attribute in the Hand class
    end note
    
    note right of InitState::dealCommonObjective
    dealCommonObjective parses the json file searching
    for the "common objective" cards andranoy selects two 
    of them. Those cards will be added to the 
    "commonObjectives" atribute in the Board class
    end note

    
    class WaitPlayerState {
        + WaitPlayerState(): void
        + joinGame(): void
        - createNewPlayers(): void
        - isFull(): void
    }

    note right of WaitPlayerState::createNewPlayer
    createNewPlayer calls the constructor method in Player, 
    updates the attributes related to the number of players 
    in Game, associates the player with his hands and
    structure by calling the setPlayerHand and setPlayerStructure 
    methods
    end note

    note right of WaitPlayerState::isFull
    checks in Game if getNumPartecipants()==getNumPlayers and 
    according to the boolean value returned it allows the state
    to change
    end note

    class PlacedCardState {
        + PlacedCardState(): void
        + placedCard(): void
        - addCard(): void
        - updatePoints(): void
    }

    note right of PlacedCardState::addCard
    calls the Structure's method insertCard and update the 
    currentResources and currentObjects attributes
    end note

    note right of PlacedCardState::updatePoints
    takes the new score scenario computed by the controller 
    and calls the Board's method updateScore 
    end note

    class DrawnCardState {
        + DrawnCardState(): void
        + drawnCard(): void
        + matchEnded(): void
        - updateDeck(): void
        - nextTurn(): void
        - endMatch(): void
    }

    note right of DrawnCardState::updateDeck
    calls the method of Deck responible of drawing a 
    card from one of the decks and add it to a specific
    player's hand
    end note

    note right of DrawnCardState::nextTurn
    calls the Game's setter methods so that 
    currentPlayer()==nextPlayer()
    end note

    class Board {
        - scores: Map<Player, int>
        - commonObjective: ObjectiveCard
        - uncoveredCards: List<Card>

        + Board(): void
        + setCommonObjective(commonObjective: ObjectiveCard): void
        + getScores(): Map<Player, int>
        + getCommonObjective(): ObjectiveCard
        + getUncoveredCards(): List<Card>
        + updateScore(player: Player, newPoints: int): void
        + addUncoveredCard(card: Card): void
        + removeUncoveredCard(card: Card): void
        + isLastTurn(): boolean
    }

    abstract class Card {
        - idCard: int
        - cardFrontImage: String
        - cardBackImage: String

        + Card(idCard: int, cardFrontImage: String, cardBackImage: String): void
        + getIdCard(): int
        + getCardFrontImage(): String
        + getCardBackImage(): String
    }

    class ObjectiveCard extends Card {
        ' FIXME: codificare il tipo di obiettivo -> Risorse, Oggetti, Pattern
        - objectiveType: ObjectiveCardType

        + ObjectiveCard(): void
        + getObjectiveType(): ObjectiveCardType
        + setObjectiveType(objectiveType: ObjectiveCardType): void
    }

    class InitialCard extends Card {
        - topCardCorners: Resource[4]
        - topCardResources: Resource[3]
        - bottomCardCorners: Resource[4]

        + InitialCard(): void
        + getTopCardCorners(): Resource[4]
        + getBottomCardCorners(): boolean[4]
        + getBottomCardResources(): Resource[3]
        + setTopCardCorners(topCardCorners: Resource[4]): void
        + setTopCardResources(topCardResources: Resource[3]): void
        + setBottomCardCorners(bottomCardCorners: boolean[4]): void
    }

    class GoldCard extends Card {
        - cardType: Resource
        - cardCorners: Resource[4]
        - resourceRequired: Resource[4]
        - cardPoints: int
        - pointType: GoldCardPointType
        ' FIXME: definire il tipo di punti -> Angoli, Oggetti, Punti Gratuiti
        
        + GoldCard(): void
        + getCardType(): Resource
        + getCardCorners(): Resource[4]
        + getResourceRequired(): Resource[4]
        + getCardPoints(): int
        + getPointType(): GoldCardPointType
        + setCardType(cardType: Resource): void
        + setCardCorners(cardCorners: Resource[4]): void
        + setResourceRequired(resourceRequired: Resource[4]): void
        + setCardPoints(cardPoints: int): void
        + setPointType(pointType: GoldCardPointType): void
    }

    class ResourceCard extends Card {
        - cardType: Resource
        - cardCorners: Resource[4]
        - cardPoints: int
        
        + ResourceCard(idCard: int, cardFrontImage: String, cardBackImage: String, cardType: Resource, cardCorners: Resource[4], cardPoints: int): void
        + getCardType(): Resource
        + getCardCorners(): Resource[4]
        + getCardPoints(): int
    }

    class Structure {
        - root: StructureNode
        - currentResources: Map<Resource, int>
        - currentObjects: Map<Objects, int>

        + Structure(): void
        + getRoot(): StructureNode
        + getCurrentResources(): Map<Resource, int>
        + getCurrentObjects(): Map<Objects, int>
        + insertCard(father: Card, card: Card): void
        + updateResources(resource: Resource, quantity: int): void
        + updateObjects(object: Objects, quantity: int): void
    }

    class StructureNode {
        - card: Card
        - topLeftChild: StructureNode
        - topRightChild: StructureNode
        - bottomRightChild: StructureNode
        - bottomLeftChild: StructureNode
        - father: StructureNode

        + StructureNode(card: Card, father: StructureNode): void
        + getCard(): Card
        + getFather(): StructureNode
        + getTopLeftChild(): StructureNode
        + getTopRightChild(): StructureNode
        + getBottomRightChild(): StructureNode
        + getBottomLeftChild(): StructureNode
        + setTopLeftChild(child: StructureNode): void
        + setTopRightChild(child: StructureNode): void
        + setBottomRightChild(child: StructureNode): void
        + setBottomLeftChild(child: StructureNode): void
    }

    class Deck {
        'check sul tipo dinamico statico'
        - goldDeck: Stack<Card>
        - resourceDeck: Stack<Card>

        + deck(): Deck
        + getGoldDeck(): Stack<Card>
        + getResourceDeck(): Stack<Card>
        + addGoldCard(card: GoldCard): void
        + addResourceCard(card: ResourceCard): void
        + drawGoldCard(): GoldCard
        + drawResourceCard(): ResourceCard
        + shuffleGoldDeck(): void
        + shuffleResourceDeck(): void
    }

    class Hand {
        - chooseBetweenObj: List<Card>
        - secretObjective: Card
        - cardsHand: List<Card>

        + Hand(): void
        + getSecretObjective(): Card
        + getCardsHand(): List<Card>
        + addCard(card: Card): void
        + removeCard(card: Card): void
        + setSecretObjective(secretObjective: Card): void
    }

    enum Color {
        YELLOW
        BLUE
        GREEN
        RED
    }
    
    enum Resource {
        VEGETABLE
        ANIMAL
        INSECT
        SHROOM
        EMPTY
    }

   enum Objects {
        FEATHER
        INK
        SCROLL
        EMPTY
    }

    enum GoldCardPointType {
        CORNERS
        INK
        FEATHER
        SCROLL
        FREE
    }

    enum ObjectiveCardType {
        ANIMAL
        VEGETABLE
        INSECT
        SHROOM
        INK_INK
        SCROL_SCROLL
        FEATHER_FEATHER
        INK_FEATHER_SCROLL
        RED_UR_RED_DL_RED
        GREEN_UL_GREEN_DR_GREEN
        BLUE_UR_BLUE_DL_BLUE
        PURPLE_UL_PURPLE_DR_PURPLE
        RED_U_RED_DR_GREEN
        GREEN_U_GREEN_DL_PURPLE
        BLUE_D_BLUE_UR_RED
        ' i pattern si leggono che il primo colore è quello centrale e gli altri due in relazione a quello centrale, UR -> Upper Right, DL -> Down Left ...
        ' ad esempio RED_UR_RED_DL_RED si legge -> rosso al centro, rosso in alto a destra e rosso in basso a sinistra
    }

    abstract class Event {
        - id: int
        - timeStamp: long
        + getEventId(): int
        + getTimeStamp(): long
    }

    enum NewPlayerEventType{
        PLAYER_JOINED
        ERROR_WHILE_ENTERING
        PLAYER_READY_TO_PLAY
        DISCONNECTED_PLAYER
    }

    enum NewGameEventType{
        GAME_STARTED
        GAME_ENDED
        GAME_ALREADY_FULL
    }

    class NewPlayerEvent extends Event{
        - type: NewPlayerEventType
        + createPlayerEvent(playerView: View): void
    }

    class NewGameEvent extends Event{
        - type: NewGameEventType
        + createGameEvent(gameView: View): void
    }

    package updategameevent {
        enum BoardEventType{
            NEXT_TURN
            LAST_TURN
            NEXT_PLAYER
            NEW_POSITION
            NEW_POINTS
        }
        enum DeckEventType{
            INIT
            CARD_PICKED
            NO_MORE_CARDS
        }
        enum HandEventType{
            CARD_PICKED
            CARD_PLACED
        }
        enum StructureEventType{
            CARD_PLACED
            RESOURCE_COUNT
        }

        class GameBoardUpdateEvent {
            - type: BoardEventType
            + createGameBoardEvent(boardView: View): void
        }

        class GameDeckUpdateEvent {
            - type: DeckEventType
            + createGameDeckEvent(deckview: View): void
        }

        class GameHandUpdateEvent {
            - type: HandEventType
            + createGameHandEvent(handView: View): void
        }

        class GameStructureUpdateEvent {
            - type: StructureEventType
            + createGameStructureEvent(structureView: View): void
        }
    }

    class ChatMessage {
        - messageId: int
        - message: String
        - sender: Player
        - receiver: List<Player>
        - timeStamp: long
        + ChatMessage(message: String, sender: Player, receiver: List<Player>, timeStamp: long): void
        + getMessageId(): int
        + getMessage(): String
        + getSender(): Player
        + getReceiver(): List<Player>
        + getTimeStamp(): long
    }

    class Chat {
        - chatMessages: List<ChatMessage>

        + Chat(): void
        + getChatMessages(): List<ChatMessage>
        + addMessage(message: ChatMessage): void
        + removeMessage(message: ChatMessage): void
    }

    package exceptions{
        exception AlreadyExistingNicknameException{}
        exception IllegalPlacementAnglesException{}
        exception IllegalPlacementResourcesException{}
        exception IllegalSequeceException{}
    }
}

package controller {
    class ServerController{
        - view: View
        - modelBoard: Board 
        - eventQueue: Queue<Event>
        - modelStructure: Structure
        - modelHand: Handwritten
        - modelDeck: Deck 
        - modelChat: Chat 
        - modelGame: Game
        - modelPlayer: Player
        ' Controller state changes
        + lastTurn(): void
        + initialTurn(): void
        + computePoints(playerList: List<Player>): List<int>
        + computePointsBy(player: Player): int
        + turnEnded(): void
        + cardPlaced(card: angledCard, player: Player): void
        + computeStructurePointsBy(player: Player)
        + drawCard(): void
        + placeCard(): void
        + sendMessage(message:String): void
        'User gesture consumer from view 
        + update(): void
        + selectView(): void
        + addEvent(event: Event): void
        + removeEvent(event: Event): void
    }

    note bottom
    It reacts to events thrown by the view by updating 
    the task queue and holds the logics to compute the 
    result of user actions and perform changes on the
    state. It acts selectiong the view that requires changes.
    end note

    class FlowController{
        - view: View
        - modelBoard: Board 
        - modelGame: Game
        - eventQueue: Queue<Event>
        'Controller state changes
        + createGame(): void
        + deleteGame(): void
        + admitPlayer(): void
        + setNickname(nickName: String): void throws AlreadyExistingNicknameException
        + setNumPlayers(num: int): void
        + setConnectionType(): void
        'User gesture consumer from view 
        + update(): void
        + addEvent(event: Event): void
        + removeEvent(event: Event): void
    }

    note bottom
    It holds the multiplayer logic and the management
    of inital settings
    end note

    class ClientController{
        - view: View
        - eventQueue: Queue<Event>
        'Action performed by user that doesn't affect the state of the model
        + whosTurn(): Player throws NotYourTurnException 
        + suitablePlaced(): boolean throws IllegalPlacementAnglesException , IllegalPlacementResourcesException 
        + suitableOrder(): boolean throws IllegalSequeceException 
        + hint(): Card
        'User gesture consumer from view 
        + update(): void
        + addEvent(event: Event): void
        + removeEvent(event: Event): void
    }

    note bottom
    It handles part of game's logic. Specifically it reacts to user's attempt to make 
    illegal moves blocking him from changing the state of the model and, given the current state
    of the game it gives hints on the best card choice.
    It doesn't interact with the model.
    end note
}

package view {
    abstract View {
        - gameModel: Game
        - boardModel: Board
        - playerModel: Player
        - deckModel: Deck
        - handModel: Hand
        - structureModel: Structure
        - eventQueue: Queue<Event>
        - controllerList: List<Controller>
        + addEvent(event: Event): void
        + removeEvent(event: Event): void
        + update(): void
        + addListener(controller: Controller): void
        + removeListener(controller: Controller): void
        + notifyAll(): void
    }

    package boardview {
        class BoardViewGui {}
        class BoardViewCli {}
    }

    package playerview {
        class PlayerViewGui {}
        class PlayerViewCli {}
    }

    package deckview {
        class DeckViewGui {}
        class DeckViewCli {}
    }

    package handview {
        class HandViewGui {}
        class HandViewCli {}
    }

    package structureview {
        class StructureViewGui {}
        class StructureViewCli {}
    }

    package gameview {
        class GameViewGui {}
        class GameViewCli {}
    }
}

Game -up- Player
Game -- Deck
Game -- Board
Game -- Hand
Game -- Structure
Deck -- Card
Structure -- StructureNode
StructureNode -- Card
Hand -- Card

Chat -- ChatMessage

GameStructureUpdateEvent -up-|> Event
GameHandUpdateEvent -up-|> Event
GameDeckUpdateEvent -up-|> Event
GameBoardUpdateEvent -up-|> Event

BoardViewGui --|> View
BoardViewCli --|> View
PlayerViewGui --|> View
PlayerViewCli --|> View
DeckViewGui --|> View
DeckViewCli --|> View
HandViewGui -up-|> View
HandViewCli -up-|> View
StructureViewGui -up-|> View
StructureViewCli -up-|> View
GameViewGui -up-|> View
GameViewCli -up-|> View

WaitPlayerState -up-|> State
InitState -up-|> State
PlacedCardState -up-|> State
DrawnCardState -up-|> State

Game *-right-> State

GameBoardUpdateEvent --> BoardEventType : type
GameDeckUpdateEvent --> DeckEventType : type
GameHandUpdateEvent --> HandEventType : type
GameStructureUpdateEvent --> StructureEventType : type

NewPlayerEvent --> NewPlayerEventType : type
NewGameEvent --> NewGameEventType : type

CliPlayerFactory -down-> CliRmiPlayer : cliRmi
CliPlayerFactory -down-> GuiRmiPlayer : cliSocket
GuiPlayerFactory -down-> CliSocketPlayer : guiRmi
GuiPlayerFactory -down-> GuiSocketPlayer : guiSocket
GuiSocketPlayer ..|> Socket
CliSocketPlayer ..|> Socket
CliRmiPlayer ..|> Rmi
GuiRmiPlayer ..|> Rmi

' left to right direction
@enduml