@startuml uml

hide empty fields

'TODO: '
'1. Enumerazione simboli e colori '
'2. frecce di composizione per struttura - carte '
'3. metodi Game '
'4. tutto controller '
'5. come inserire, cosa inserire per la view '
'6. inserire network? '

package model {

    class Game {
        - gameId: int
        - observerList: List<View>
        - numPlayers: int
        - numParticipants: int
        '- ?StadioGioco
        - currentPlayer: COLORE
        '?Board con dizionario colore punteggio
        'check sull'istanza array
        - commonObjectives: int[2]
        - placedCards: int[2][2]

        'General'

        'Initial'
        + drawResourceCards() : void
        + drawGoldCard() : void
        + drawSecretObjective() : void
        'Board'
        + getPoints( COLORE colore) : int
        + futurePoints () : int
        'Structure'
        + insertCard() : void
        + checkPattern(): void
        + calculateCurrentResources(): void
        + calculatePoints(): void
        + notifyAll(): void
        + addObserver(view: View): void
        + removeObserver(view: View): void
    }

    class Player {
        - nickname: String
        - colorPlayer: COLOR

        + getNickname(): String
        + getColorPlayer(): COLOR
    }

    class Board {
        + getPoints( COLORE colore) : int
        + futurePoints () : int
    }

    class Card {
        'colore lo codifichiam nell'id? o lo salviamo in una var?
        - idCard: int
        - codeFront: char[]
        - codeBack: char[]
        - cardPoints: int[]

        + getIdCard(): int
        + getCodeFront(): char[]
        + getCodeBack(): char[]
        + getCardPoints(): int[]
    }

    class ObjectiveCard extends Card {
        'tipo dell'obiettivo con enum? o codificato?'
        'non chiarissimo come caratterizzare l'obiettivo'
    }

    class AngledCard extends Card {
        - cardCorners: int[2][2]
        'decidere valore di default per corner non presente, corner presente non collegato, Id/puntatore carrta'
        - cardSymbols: SIMBOLO[2][2]

        + getCardCorners(): int[2][2]
        + getCardSymbols(): SIMBOLO[2][2]
    }

    class GoldCard extends AngledCard {
        - resources: SIMBOLO[5]
        'tipo ^ da capire'
        'caratterizzare tipo obiettivo'

        + getResources(): SIMBOLO[5]
    }

    class InitialCard extends AngledCard {
        - centerResources: SIMBOLO[3]
        'tipo da capire'

        + getCenterResources(): SIMBOLO[3]
    }

    class ResourceCard extends AngledCard {}

    class Structure {
        + insertCard() : void
        + checkPattern(): void
        + calculateCurrentResources(): void
        + calculatePoints(): void
    }

    class Deck {
        'check sul tipo dinamico statico'
        - goldDeck: List<Card>
        - resourceDeck: List<Card>
    }

    class Hand {
        - secretObjective: int
        - cardsHand: int[3]

        + getSecretObjective(): int
        + getCardsHand(): int[3]
    }

    enum COLORE {
        YELLOW
        BLUE
        GREEN
        RED
    }

    enum SIMBOLI {
        VEGETABLE
        ANIMAL
        INSECT
        SHROOM
        FEATHER
        INK
        SCROLL
    }

    abstract class Event {
        - id: int
        - timeStamp: long
        + getEventId(): int
        + getTimeStamp(): long
    }

    class NewPlayerEvent extends Event{
        + createPlayerEvent(id: int, timeStamp: long, playerView: View): void
    }

    class NewGameEvent extends Event{
        + createGameEvent(id: int, timeStamp: long, gameView: View): void
    }

    package updategameevent {
        class GameBoardUpdateEvent {
            + createGameBoardEvent(id: int, timeStamp: long, boardView: View): void
        }

        class GameDeckUpdateEvent {
            + createGameDeckEvent(id: int, timeStamp: long, deckview: View): void
        }

        class GameHandUpdateEvent {
            + createGameHandEvent(id: int, timeStamp: long, handView: View): void
        }

        class GameStructureUpdateEvent {
            + createGameStructureEvent(id: int, timeStamp: long, structureView: View): void
        }
    }

    class ChatMessage {
        - messageId: int
        - message: String
        - sender: Player
        - receiver: List<Player>
        - timeStamp: long
    }

    class Chat {
        - chatMessages: List<ChatMessage>
        + addMessage(message: ChatMessage): void
        + removeMessage(message: ChatMessage): void
    }
}

package controller {}

package view {
    abstract View {
        - gameModel: Game
        - boardModel: Board
        - playerModel: Player
        - deckModel: Deck
        - handModel: Hand
        - structureModel: Structure
        - eventQueue: Queue<Event>
        - controllerList: List<Controller>
        + addEvent(event: Event): void
        + removeEvent(event: Event): void
        + update(): void
        + addListener(controller: Controller): void
        + removeListener(controller: Controller): void
        + notifyAll(): void
    }

    package boardview {
        class BoardViewGui extends View {}
        class BoardViewCli extends View {}
    }

    package playerview {
        class PlayerViewGui extends View {}
        class PlayerViewCli extends View {}
    }

    package deckview {
        class DeckViewGui extends View {}
        class DeckViewCli extends View {}
    }

    package handview {
        class HandViewGui extends View {}
        class HandViewCli extends View {}
    }

    package structureview {
        class StructureViewGui extends View {}
        class StructureViewCli extends View {}
    }

    package gameview {
        class GameViewGui extends View {}
        class GameViewCli extends View {}
    }
}

Game -- Player
Game -- Deck
Game -- Board
Deck -- Card
Player -- Hand
Player -- Structure
Structure -- Card
Hand -- Card

Chat -- ChatMessage

updategameevent --|> Event

@enduml