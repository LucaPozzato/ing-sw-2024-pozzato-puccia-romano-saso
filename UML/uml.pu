@startuml uml

hide empty fields

'TODO: '
'1. Enumerazione simboli e colori '
'2. frecce di composizione per struttura - carte '
'3. metodi Game '
'4. tutto controller '
'5. come inserire, cosa inserire per la view '
'6. inserire network? '

package Model {
    class Game {
        - numPlayers: int
        - numParticipants: int
        '- ?StadioGioco
        - currentPlayer: COLORE
        '?Board con dizionario colore punteggio
        'check sull'istanza array
        - commonObjectives: int[2]
        - placedCards: int[2][2]
    }

    class Player {
        - nickname: String
        - colorPlayer: COLOR

        + getNickname(): String
        + getColorPlayer(): COLOR
    }


    class Card {
        'colore lo codifichiam nell'id? o lo salviamo in una var?
        - idCard: int
        - codeFront: char[]
        - codeBack: char[]
        - cardPoints: int[]

        + getIdCard(): int
        + getCodeFront(): char[]
        + getCodeBack(): char[]
        + getCardPoints(): int[]
    }

    class ObjectiveCard extends Card {
        'tipo dell'obiettivo con enum? o codificato?'
        'non chiarissimo come caratterizzare l'obiettivo'
    }

    class AngledCard extends Card {
        - cardCorners: int[2][2]
        'decidere valore di default per corner non presente, corner presente non collegato, Id/puntatore carrta'
        - cardSymbols: SIMBOLO[2][2]

        + getCardCorners(): int[2][2]
        + getCardSymbols(): SIMBOLO[2][2]
    }

    class GoldCard extends AngledCard {
        - resources: SIMBOLO[5]
        'tipo ^ da capire'
        'caratterizzare tipo obiettivo'

        + getResources(): SIMBOLO[5]
    }

    class InitialCard extends AngledCard {
        - centerResources: SIMBOLO[3]
        'tipo da capire'

        + getCenterResources(): SIMBOLO[3]
    }

    class ResourceCard extends AngledCard {}

    class Structure {}

    class Deck {
        'check sul tipo dinamico statico'
        - goldDeck: List<Card>
        - resourceDeck: List<Card>
    }

    class Hand {
        - secretObjective: int
        - cardsHand: int[3]

        + getSecretObjective(): int
        + getCardsHand(): int[3]
    }
}

Game "1" -- "1...4" Player
Game -- Deck
Deck -- Card
Player -- Structure
Player -- Hand
Structure -- Card

package Controller {}

package View {}

@enduml